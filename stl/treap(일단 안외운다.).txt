#include <iostream>
using namespace std;

typedef int KeyType;

struct Node {
	KeyType key;
	int priority, size;
	Node *left, *right;
	Node(const KeyType& _key) : key(_key), priority(rand()), size(1), left(NULL), right(NULL) {}
	void setLeft(Node* newLeft) { left = newLeft; calcSize(); }
	void setRight(Node* newRight) { right = newRight; calcSize(); }

	void calcSize() {
		size = 1;
		if (left) size += left->size;
		if (right) size += right->size;
	}
};

struct NodePair {
	Node *f, *s;
	NodePair(Node* _f, Node* _s) : f(_f), s(_s) {}
};

NodePair split(Node* root, KeyType key) {
	if (root == NULL) return NodePair(NULL, NULL);
	if (root->key < key) {
		NodePair rs = split(root->right, key);
		root->setRight(rs.f);
		return NodePair(root, rs.s);
	}
	NodePair ls = split(root->left, key);
	root->setLeft(ls.s);
	return NodePair(ls.f, root);
}

Node* insert(Node* root, Node* node) {
	if (root == NULL) return node;
	if (root->priority < node->priority) {
		NodePair splitted = split(root, node->key);
		node->setLeft(splitted.f);
		node->setRight(splitted.s);
		return node;
	}
	else if (node->key < root->key)
		root->setLeft(insert(root->left, node));
	else
		root->setRight(insert(root->right, node));
	return root;

}

Node* merge(Node* a, Node* b) {
	if (a == NULL) return b;
	if (b == NULL) return a;
	if (a->priority < b->priority) {
		b->setLeft(merge(a, b->left));
		return b;
	}
	a->setRight(merge(a->right, b));
	return a;
}

Node* erase(Node* root, KeyType key) {
	if (root == NULL) return root;
	if (root->key == key) {
		Node* ret = merge(root->left, root->right);
		delete root;
		return ret;
	}
	if (key < root->key)
		root->setLeft(erase(root->left, key));
	else
		root->setRight(erase(root->right, key));
	return root;
}

void inorder(Node* root) {
	if (root == NULL) return;
	inorder(root->left);
	cout << root->key << " ";
	inorder(root->right);
}

Node* kth(Node* root, int k) {//k번째로 작은 노드를 반환한다.
	int leftSize = 0;
	if (root->left != NULL) leftSize = root->left->size;
	if (k <= leftSize) return kth(root->left, k);
	if (k == leftSize + 1) return root;
	return kth(root->right, k - leftSize - 1);
}

int countLessThan(Node* root, KeyType key) {//key값 보다 작은 노드의 개수를 반환한다.
	if (root == NULL) return 0;
	if (root->key >= key)
		return countLessThan(root->left, key);
	int ls = (root->left ? root->left->size : 0);
	return ls + 1 + countLessThan(root->right, key);
}

void main() {
	Node* root = NULL;
	Node* kNode;
	for (int i = 2; i<9; i++) {
		root = insert(root, new Node(i));
	}
	root = erase(root, 5);

	kNode = kth(root, 4);
	cout << kNode->key << endl;
	cout << countLessThan(root, 5) << endl;
	inorder(root);
}// => 이것의 정답은 중위순회 출력결과 빼고 6,3이 나와야한다.